addon "evm" {
    rpc_api_url = input.rpc_api_url
    chain_id = input.chain_id
}

signer "deployer" "evm::secret_key" {
    secret_key = input.deployer_secret_key
}

action "deploy_fiat_token_proxy" "evm::deploy_contract" {
    contract = evm::get_contract_from_foundry_project("FiatTokenProxy")
    constructor_args = [
        variable.fiat_token_v2_2_address
    ]
    signer = signer.deployer
}

action "deploy_master_minter" "evm::deploy_contract" {
    contract = evm::get_contract_from_foundry_project("MasterMinter")
    constructor_args = [
        action.deploy_fiat_token_proxy.contract_address
    ]
    signer = signer.deployer
}

action "transfer_minter_ownership" "evm::call_contract" {
    contract_address = action.deploy_master_minter.contract_address
    contract_abi = action.deploy_master_minter.abi
    function_name = "transferOwnership"
    function_args = [
        evm::address(input.master_minter_owner)
    ]
    signer = signer.deployer
}

action "change_proxy_admin" "evm::call_contract" {
    contract_address = action.deploy_fiat_token_proxy.contract_address
    contract_abi = action.deploy_fiat_token_proxy.abi
    function_name = "changeAdmin"
    function_args = [
        evm::address(input.proxy_admin)
    ]
    signer = signer.deployer
}

action "deploy_fiat_token" "evm::deploy_contract" {
    contract = evm::get_contract_from_foundry_project(variable.fiat_token_contract_name)
    signer = signer.deployer

}

action "initialize" "evm::call_contract" {
    contract_address = action.deploy_fiat_token.contract_address
    contract_abi = action.deploy_fiat_token.abi
    function_name = "initialize"
    function_args = [
        input.token_name,
        input.token_symbol,
        input.token_currency,
        evm::uint8(input.token_decimals),
        action.deploy_master_minter.contract_address,
        evm::address(input.pauser),
        evm::address(input.blacklister),
        evm::address(input.owner)
    ]
    signer = signer.deployer
    // depends_on = [action.deploy_fiat_token]
}

action "initialize_v2" "evm::call_contract" {
    contract_address = action.deploy_fiat_token.contract_address
    contract_abi = action.deploy_fiat_token.abi
    function_name = "initializeV2"
    function_args = [
        input.token_name,
    ]
    signer = signer.deployer
    depends_on = [action.initialize]
}

action "initialize_v2_1" "evm::call_contract" {
    contract_address = action.deploy_fiat_token.contract_address
    contract_abi = action.deploy_fiat_token.abi
    function_name = "initializeV2_1"
    function_args = [
        evm::address(input.lost_and_found)
    ]
    signer = signer.deployer
    depends_on = [action.initialize_v2]
}

action "initialize_v2_2" "evm::call_contract" {
    contract_address = action.deploy_fiat_token.contract_address
    contract_abi = action.deploy_fiat_token.abi
    function_name = "initializeV2_2"
    function_args = [
        [],
        input.token_symbol
    ]
    signer = signer.deployer
    depends_on = [action.initialize_v2_1]
}